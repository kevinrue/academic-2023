<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Syllabus | Kevin Rue-Albrecht</title>
    <link>/courses/make-bioc-package/</link>
      <atom:link href="/courses/make-bioc-package/index.xml" rel="self" type="application/rss+xml" />
    <description>Syllabus</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Kevin Rue-Albrecht 2019-2020</copyright><lastBuildDate>Thu, 12 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/android-chrome-512x512.png</url>
      <title>Syllabus</title>
      <link>/courses/make-bioc-package/</link>
    </image>
    
    <item>
      <title>Install R</title>
      <link>/courses/make-bioc-package/prerequisites-1-r/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0100</pubDate>
      <guid>/courses/make-bioc-package/prerequisites-1-r/</guid>
      <description>&lt;h2 id=&#34;scope&#34;&gt;Scope&lt;/h2&gt;
&lt;p&gt;In this section, we provide information and advice to install &lt;em&gt;R&lt;/em&gt; for the purpose of developing a &lt;em&gt;Bioconductor&lt;/em&gt; package.&lt;/p&gt;
&lt;p&gt;This section does not seek to provide a comprehensive workflow through the installation of &lt;em&gt;R&lt;/em&gt;, as the details will depend on your individual operating system and configuration.
Instead, this section includes links to key resources and sources of information.&lt;/p&gt;
&lt;h2 id=&#34;which-version-of-r&#34;&gt;Which version of R?&lt;/h2&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://bioconductor.org/developers/how-to/useDevel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bioconductor developer guidelines&lt;/a&gt; state:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Package authors should develop against the version of &lt;em&gt;R&lt;/em&gt; that will be available to users when the &lt;em&gt;Bioconductor&lt;/em&gt; devel branch becomes the &lt;em&gt;Bioconductor&lt;/em&gt; release branch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In addition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This means that, from mid-October through mid-April, &lt;em&gt;Bioconductor&lt;/em&gt; developers should be developing against R-devel. From mid-April to mid-October, developers should use R-release (actually, the R snapshot from the R-x-y-branch) for &lt;em&gt;Bioconductor&lt;/em&gt; development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;r-sources-or-r-binaries&#34;&gt;R Sources or R binaries?&lt;/h2&gt;
&lt;h3 id=&#34;r-binaries&#34;&gt;R binaries&lt;/h3&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://cran.r-project.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN website&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows and Mac users most likely want to download the precompiled binaries listed in the upper box, not the source code. The sources have to be compiled before you can use them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The main advantage of precompiled &lt;em&gt;R binaries&lt;/em&gt; is that they distribute code that can be immediately installed and executed.
It is generally the fastest solution to get you started with your own work.
However, each binaries is compiled for a specific operating system.
To establish a working &lt;em&gt;R&lt;/em&gt; installation on your computer, you must find binaries that match your operating system.&lt;/p&gt;
&lt;p&gt;R binaries - including both &lt;em&gt;R-release&lt;/em&gt; and &lt;em&gt;R-devel&lt;/em&gt; - can be obtained from CRAN: &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;https://cran.r-project.org/&lt;/a&gt;.
The navigation panel on the left includes a link &amp;lsquo;R Binaries&amp;rsquo;.&lt;/p&gt;
&lt;h3 id=&#34;r-sources&#34;&gt;R sources&lt;/h3&gt;
&lt;p&gt;The main advantage of &lt;em&gt;R sources&lt;/em&gt; is that they distribute the human readable version of the application, which users can then compile on their own system with the right set of tools to yield an installation adapted to their system configuration and libraries.
This often pays off when installing &lt;em&gt;R packages&lt;/em&gt; that need to be compiled from source themselves.
However, installing compilers, keeping them up to date, and compiling sources can be a challenge, even for experienced developers.
As the 
&lt;a href=&#34;https://cran.r-project.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN website&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you do not know what this means, you probably do not want to do it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;R sources - including both &lt;em&gt;R-release&lt;/em&gt; and &lt;em&gt;R-devel&lt;/em&gt; - can be obtained from CRAN: &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;https://cran.r-project.org/&lt;/a&gt;
The navigation panel on the left includes a link &amp;lsquo;R Sources&amp;rsquo;.&lt;/p&gt;
&lt;h2 id=&#34;alternative-installations&#34;&gt;Alternative installations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Homebrew: &lt;a href=&#34;https://formulae.brew.sh/formula/r&#34;&gt;https://formulae.brew.sh/formula/r&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Anaconda: &lt;a href=&#34;https://anaconda.org/r/r&#34;&gt;https://anaconda.org/r/r&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Install RStudio</title>
      <link>/courses/make-bioc-package/prerequisites-2-rstudio/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0100</pubDate>
      <guid>/courses/make-bioc-package/prerequisites-2-rstudio/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this section, &amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;install-rstudio&#34;&gt;Install RStudio&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;RStudio&lt;/em&gt; program can be obtained from the RStudio website: &lt;a href=&#34;https://rstudio.com/products/rstudio/download/&#34;&gt;https://rstudio.com/products/rstudio/download/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install helper packages</title>
      <link>/courses/make-bioc-package/prerequisites-3-packages/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0100</pubDate>
      <guid>/courses/make-bioc-package/prerequisites-3-packages/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This section introduces R packages that were developed to facilitate the development of other R packages.&lt;/p&gt;
&lt;h2 id=&#34;install-_biocmanager_&#34;&gt;Install &lt;em&gt;BiocManager&lt;/em&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;install.packages(&amp;quot;BiocManager&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-_usethis_&#34;&gt;Install &lt;em&gt;usethis&lt;/em&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;BiocManager::install(&amp;quot;usethis&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a GitHub repository</title>
      <link>/courses/make-bioc-package/setup-3/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0100</pubDate>
      <guid>/courses/make-bioc-package/setup-3/</guid>
      <description>&lt;h2 id=&#34;create-and-link-the-repository-to-github&#34;&gt;Create and link the repository to GitHub&lt;/h2&gt;
&lt;p&gt;Use the &lt;code&gt;usethis::use_git()&lt;/code&gt; to initialise a Git repository and add important files to .gitignore.
At that point, consent to make an initial commit with the initial package skeleton.
Also, let the function relaunch the RStudio session to enable the RStudio git panel.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;usethis::use_github()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function will be prompt you with the following choice:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;✓ Setting active project to &#39;/Users/kevin/git/biocpkg&#39;
✓ Checking that current branch is &#39;master&#39;
Which git protocol to use? (enter 0 to exit) 

1: ssh   &amp;lt;-- presumes that you have set up ssh keys
2: https &amp;lt;-- choose this if you don&#39;t have ssh keys (or don&#39;t know if you do)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go with &lt;code&gt;ssh&lt;/code&gt; (choice 1).&lt;/p&gt;
&lt;p&gt;You will then be prompted with the following information&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;✓ Setting active project to &#39;/Users/kevin/git/biocpkg&#39;
✓ Checking that current branch is &#39;master&#39;
● Check title and description
  Name:        biocpkg
  Description: Example Bioconductor Package
Are title and description ok?

1: Yeah
2: Absolutely not
3: No way
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Confirm when everything is in order (choice 1).&lt;/p&gt;
&lt;p&gt;You will then be prompted with the following information:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;✓ Creating GitHub repository
✓ Setting remote &#39;origin&#39; to &#39;git@github.com:kevinrue/biocpkg.git&#39;
✓ Adding GitHub links to DESCRIPTION
✓ Setting URL field in DESCRIPTION to &#39;https://github.com/kevinrue/biocpkg&#39;
✓ Setting BugReports field in DESCRIPTION to &#39;https://github.com/kevinrue/biocpkg/issues&#39;
✓ Pushing &#39;master&#39; branch to GitHub and setting remote tracking branch
● Failed to push and set tracking branch.
  This often indicates a problem with git2r and the credentials.
  Try this in the shell, to complete the set up:
  `git push --set-upstream origin master`
✓ Opening URL &#39;https://github.com/kevinrue/biocpkg&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Initialize an R package skeleton</title>
      <link>/courses/make-bioc-package/setup-1/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0100</pubDate>
      <guid>/courses/make-bioc-package/setup-1/</guid>
      <description>&lt;h2 id=&#34;create&#34;&gt;Create a new package skeleton&lt;/h2&gt;
&lt;p&gt;In RStudio, use &lt;code&gt;usethis::create_package()&lt;/code&gt; to create a minimal R package skeleton.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;usethis::create_package(&amp;quot;~/biocpkg&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function will prompt you the following information:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;✓ Setting active project to &#39;/Users/kevin/biocpkg&#39;
✓ Creating &#39;R/&#39;
✓ Writing &#39;DESCRIPTION&#39;
Package: biocpkg
Title: What the Package Does (One Line, Title Case)
Version: 0.0.0.9000
Authors@R (parsed):
    * First Last &amp;lt;first.last@example.com&amp;gt; [aut, cre] (YOUR-ORCID-ID)
Description: What the package does (one paragraph).
License: `use_mit_license()`, `use_gpl3_license()` or friends to
    pick a license
Encoding: UTF-8
LazyData: true
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.1.0
✓ Writing &#39;NAMESPACE&#39;
✓ Writing &#39;biocpkg.Rproj&#39;
✓ Adding &#39;.Rproj.user&#39; to &#39;.gitignore&#39;
✓ Adding &#39;^biocpkg\\.Rproj$&#39;, &#39;^\\.Rproj\\.user$&#39; to &#39;.Rbuildignore&#39;
✓ Opening &#39;/Users/kevin/biocpkg/&#39; in new RStudio session
✓ Setting active project to &#39;&amp;lt;no active project&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The package skeleton includes in particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a root directory for the package&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;R/&lt;/code&gt; subdirectory, where the package code will be stored&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;DESCRIPTION&lt;/code&gt; file, that holds information about the package and dependencies&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;NAMESPACE&lt;/code&gt; file, that will become relevant to import/export function to/from the package environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The function also opens a new RStudio session in the project root directory.
From hereon, we will be working in that session.&lt;/p&gt;
&lt;h2 id=&#34;choosing-a-license&#34;&gt;Choosing a license&lt;/h2&gt;
&lt;p&gt;In the information above, we are prompted to choose a license.
Use the following code to choose the MIT license.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;usethis::use_mit_license(name = &amp;quot;Kevin Rue-Albrecht&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will be prompted the following information.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;✓ Setting active project to &#39;/Users/kevin/biocpkg&#39;
✓ Setting License field in DESCRIPTION to &#39;MIT + file LICENSE&#39;
✓ Writing &#39;LICENSE.md&#39;
✓ Adding &#39;^LICENSE\\.md$&#39; to &#39;.Rbuildignore&#39;
✓ Writing &#39;LICENSE&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will edit the &lt;code&gt;License:&lt;/code&gt; field of the &lt;code&gt;DESCRIPTION&lt;/code&gt; file, and add the following files in the package root directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LICENSE.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;edit-the-description-file&#34;&gt;Edit the DESCRIPTION file&lt;/h2&gt;
&lt;p&gt;This is also a good time to edit the &lt;code&gt;DESCRIPTION&lt;/code&gt; file, in particular the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Title:&lt;/code&gt;, a one line description of what the package in Title Case.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Version:&lt;/code&gt;, a version number in the form of &lt;code&gt;major.minor.patch&lt;/code&gt; with &lt;code&gt;major&lt;/code&gt; being 0 and &lt;code&gt;minor&lt;/code&gt; being strictly less than 99 until submission to Bioconductor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Authors@R:&lt;/code&gt;, a vector of &lt;code&gt;person&lt;/code&gt; objects that include the maintainer and contributors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Description:&lt;/code&gt;, a one paragraph description of the package functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Title: Example Bioconductor Package
Version: 0.0.1
Authors@R: 
    c(person(given = &amp;quot;Kevin&amp;quot;,
           family = &amp;quot;Rue-Albrecht&amp;quot;,
           role = c(&amp;quot;aut&amp;quot;, &amp;quot;cre&amp;quot;),
           email = &amp;quot;kevinrue67@gmail.com&amp;quot;,
           comment = c(ORCID = &amp;quot;0000-0003-3899-3872&amp;quot;)))
Description:
    An example Bioconductor package illustrating best practices
    in software development and continuous integration.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Initialize version control using git</title>
      <link>/courses/make-bioc-package/setup-2/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0100</pubDate>
      <guid>/courses/make-bioc-package/setup-2/</guid>
      <description>&lt;h2 id=&#34;create-a-new-package-skeleton&#34;&gt;Create a new package skeleton&lt;/h2&gt;
&lt;p&gt;Use the &lt;code&gt;usethis::use_git()&lt;/code&gt; to initialise a Git repository and add important files to .gitignore.
At that point, consent to make an initial commit with the initial package skeleton.
Also, let the function restart the RStudio session to activate the RStudio Git pane.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;usethis::use_git()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The new git repository is materialized by the presence of a new &lt;code&gt;git/&lt;/code&gt; subdirectory.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set up GitHub Actions</title>
      <link>/courses/make-bioc-package/ci-1-gh-actions/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0100</pubDate>
      <guid>/courses/make-bioc-package/ci-1-gh-actions/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This section introduces a workflow to set up continuous integration for a working R package.&lt;/p&gt;
&lt;h2 id=&#34;open-a-new-git-branch&#34;&gt;Open a new git branch&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; an earlier section will explain how to protect the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;At this point, the &lt;code&gt;master&lt;/code&gt; branch of your GitHub repository should be protected.
As always, we will work on a branch and merge to the &lt;code&gt;master&lt;/code&gt; branch when the continuous integration feature is ready.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b ci
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;load-_usethis_&#34;&gt;Load &lt;em&gt;usethis&lt;/em&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(usethis)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-readme-file&#34;&gt;Create a README file&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; this should be moved to an earlier section, as it is not part of the continuous integration setup &lt;em&gt;per se&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t already, use &lt;code&gt;use_readme_md()&lt;/code&gt; to create a &lt;code&gt;README.md&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;use_readme_md()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;set-up-the-template-r-cmd-check-action&#34;&gt;Set up the template &amp;lsquo;R CMD check&amp;rsquo; action&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;use_github_action_check_full()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As per documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This action installs the last 5 minor R versions and runs &lt;code&gt;R CMD check&lt;/code&gt; via the &lt;code&gt;R BiocStyle::CRANpkg(&amp;quot;rcmdcheck&amp;quot;)&lt;/code&gt; package on the three major OSs (linux, macOS and Windows).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Upon completion, &lt;code&gt;use_github_action_check_full()&lt;/code&gt; generates Markdown content that displays a badge indicating the status of the GitHub Action.
This content is both copied to your clipboard, and printed in the console.
It should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!-- badges: start --&amp;gt;
  [![R build status](https://github.com/user/repo/workflows/R-CMD-check/badge.svg)](https://github.com/user/repo/actions)
  &amp;lt;!-- badges: end --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Paste this content in the &lt;code&gt;badges:&lt;/code&gt; section of your &lt;code&gt;README.md&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&#34;edit-the-github-action-configuration&#34;&gt;Edit the GitHub Action configuration&lt;/h2&gt;
&lt;p&gt;First, remove the restriction on &lt;code&gt;branches&lt;/code&gt; for the &lt;code&gt;push&lt;/code&gt; event.
This will trigger the action on every push to any branch.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:
  push:
  pull_request:
    branches:
      - master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, keep only the latest &lt;code&gt;ubuntu&lt;/code&gt; version, mainly to reduce the number of configurations run as separate jobs.
For instance, this would look something like the following (update to the relevant version):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: &#39;devel&#39;}
          - {os: macOS-latest,   r: &#39;4.0&#39;}
          - {os: windows-latest, r: &#39;4.0&#39;}
          - {os: ubuntu-16.04,   r: &#39;4.0&#39;, rspm: &amp;quot;https://packagemanager.rstudio.com/cran/__linux__/xenial/latest&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When working with a 
&lt;a href=&#34;https://www.bioconductor.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Bioconductor&lt;/em&gt;&lt;/a&gt; package, &lt;code&gt;BiocManager&lt;/code&gt; should be installed during the &lt;code&gt;Query dependencies&lt;/code&gt; step.
This allows &lt;code&gt;BiocManager::repositories()&lt;/code&gt; to be called to add 
&lt;a href=&#34;https://www.bioconductor.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Bioconductor&lt;/em&gt;&lt;/a&gt; package repositories to be added to the global session options.
In turn, this allows &lt;code&gt;remotes::dev_package_deps()&lt;/code&gt; to query all repositories when identifying dependencies, as it uses the default argument value &lt;code&gt;repos = getOption(&amp;quot;repos&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: Query dependencies
  run: |
    install.packages(c(&#39;remotes&#39;, &#39;BiocManager&#39;))
    options(repos = c(getOption(&amp;quot;repos&amp;quot;), BiocManager::repositories()))
    saveRDS(remotes::dev_package_deps(dependencies = TRUE), &amp;quot;depends.Rds&amp;quot;, version = 2)
  shell: Rscript {0}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, when working with a 
&lt;a href=&#34;https://www.bioconductor.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Bioconductor&lt;/em&gt;&lt;/a&gt; package, we add 
&lt;a href=&#34;https://www.bioconductor.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Bioconductor&lt;/em&gt;&lt;/a&gt; package repositories to the global session options during the &lt;code&gt;Install dependencies&lt;/code&gt; step.
Similarly, the &lt;code&gt;remotes::install_deps(dependencies = TRUE)&lt;/code&gt; uses the default argument value &lt;code&gt;repos = getOption(&amp;quot;repos&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this step, you may also add any dependency that is not explicitly declared in the &lt;code&gt;DESCRIPTION&lt;/code&gt; file of your package, or installed as an indirect dependency, as well as any esoteric development version of your dependencies.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: Install dependencies
  run: |
    options(repos = c(getOption(&amp;quot;repos&amp;quot;), BiocManager::repositories()))
    remotes::install_deps(dependencies = TRUE)
    remotes::install_cran(&amp;quot;rcmdcheck&amp;quot;)
  shell: Rscript {0}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
